// <auto-generated />
using System;
using EcommerceApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceApi.Migrations
{
    [DbContext(typeof(EcommerceDbContext))]
    [Migration("20240320033307_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EcommerceApi.Models.Database.Address", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("zipCode")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Category", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("parentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("parentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Customer", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("identityNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("identityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("userId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.FavoriteProduct", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("productId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.HasIndex("productId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Order", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("addressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("creationDates")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isPaid")
                        .HasColumnType("bit");

                    b.Property<double>("subtotal")
                        .HasColumnType("float");

                    b.Property<double>("total")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("addressId");

                    b.HasIndex("customerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.OrderProduct", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("productId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("orderId");

                    b.HasIndex("productId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.OrderRecord", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("detail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("orderStateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("orderId");

                    b.HasIndex("orderStateId");

                    b.ToTable("OrderRecords");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.OrderState", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("OrderStates");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Product", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("categoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("stock")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Role", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.User", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("roleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("roleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Address", b =>
                {
                    b.HasOne("EcommerceApi.Models.Database.Customer", "customer")
                        .WithMany("addresses")
                        .HasForeignKey("customerId")
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Category", b =>
                {
                    b.HasOne("EcommerceApi.Models.Database.Category", "parent")
                        .WithMany("subcategories")
                        .HasForeignKey("parentId");

                    b.Navigation("parent");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Customer", b =>
                {
                    b.HasOne("EcommerceApi.Models.Database.User", "user")
                        .WithMany("customers")
                        .HasForeignKey("userId")
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.FavoriteProduct", b =>
                {
                    b.HasOne("EcommerceApi.Models.Database.Customer", "customer")
                        .WithMany("favoriteProducts")
                        .HasForeignKey("customerId")
                        .IsRequired();

                    b.HasOne("EcommerceApi.Models.Database.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Order", b =>
                {
                    b.HasOne("EcommerceApi.Models.Database.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId")
                        .IsRequired();

                    b.HasOne("EcommerceApi.Models.Database.Customer", "customer")
                        .WithMany("orders")
                        .HasForeignKey("customerId")
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.OrderProduct", b =>
                {
                    b.HasOne("EcommerceApi.Models.Database.Order", "order")
                        .WithMany("orderProducts")
                        .HasForeignKey("orderId")
                        .IsRequired();

                    b.HasOne("EcommerceApi.Models.Database.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.OrderRecord", b =>
                {
                    b.HasOne("EcommerceApi.Models.Database.Order", "order")
                        .WithMany("orderRecords")
                        .HasForeignKey("orderId")
                        .IsRequired();

                    b.HasOne("EcommerceApi.Models.Database.OrderState", "orderState")
                        .WithMany()
                        .HasForeignKey("orderStateId")
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("orderState");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Product", b =>
                {
                    b.HasOne("EcommerceApi.Models.Database.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.User", b =>
                {
                    b.HasOne("EcommerceApi.Models.Database.Role", "role")
                        .WithMany()
                        .HasForeignKey("roleId")
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Category", b =>
                {
                    b.Navigation("subcategories");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Customer", b =>
                {
                    b.Navigation("addresses");

                    b.Navigation("favoriteProducts");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.Order", b =>
                {
                    b.Navigation("orderProducts");

                    b.Navigation("orderRecords");
                });

            modelBuilder.Entity("EcommerceApi.Models.Database.User", b =>
                {
                    b.Navigation("customers");
                });
#pragma warning restore 612, 618
        }
    }
}
